#if UNITY_IOS || UNITY_IPHONE
#if UNITY_2019_3_OR_NEWER
using UnityEditor.iOS.Xcode.Extensions;
#endif
using UnityEngine.Networking;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEditor.iOS.Xcode;
using UnityEngine;

// UTUD stands for User Tracking Usage Description
public class UTUDLocalizationPostProcessor
{
    private static readonly string _defaultDescriptionEn = "Device info will be used for delivering more relevant content";

#region Localization
    [PostProcessBuildAttribute(int.MaxValue-1)]
    public static void MaxPostProcessPbxProject(BuildTarget buildTarget, string buildPath)
    {
        var projectPath = PBXProject.GetPBXProjectPath(buildPath);
        var project = new PBXProject();
        project.ReadFromFile(projectPath);

#if UNITY_2019_3_OR_NEWER
        var unityMainTargetGuid = project.GetUnityMainTargetGuid();
        var unityFrameworkTargetGuid = project.GetUnityFrameworkTargetGuid();
#else
        var UnityMainTargetName = "Unity-iPhone";
        var unityMainTargetGuid = project.TargetGuidByName(UnityMainTargetName);
        var unityFrameworkTargetGuid = project.TargetGuidByName(UnityMainTargetName);
#endif
        UTUDLocalizationSettings localizationAsset = Resources.Load<UTUDLocalizationSettings>("UTUDLocalizationSettings");
        if (localizationAsset != null)
            foreach (var localizationElement in localizationAsset.Localization)
            {
                LocalizeUserTrackingDescriptionIfNeeded(localizationAsset, localizationElement.LocalizedText, localizationElement.Code, buildPath, project, unityMainTargetGuid);
            }

        project.WriteToFile(projectPath);
    }

    private static void LocalizeUserTrackingDescriptionIfNeeded(UTUDLocalizationSettings settings, string localizedUserTrackingDescription, string localeCode, string buildPath, PBXProject project, string targetGuid)
    {
        const string resourcesDirectoryName = "UTUDResources";
        var resourcesDirectoryPath = Path.Combine(buildPath, resourcesDirectoryName);
        var localeSpecificDirectoryName = localeCode + ".lproj";
        var localeSpecificDirectoryPath = Path.Combine(resourcesDirectoryPath, localeSpecificDirectoryName);
        var infoPlistStringsFilePath = Path.Combine(localeSpecificDirectoryPath, "InfoPlist.strings");

        // Create intermediate directories as needed.
        if (!Directory.Exists(resourcesDirectoryPath))
        {
            Directory.CreateDirectory(resourcesDirectoryPath);
        }

        if (!Directory.Exists(localeSpecificDirectoryPath))
        {
            Directory.CreateDirectory(localeSpecificDirectoryPath);
        }

        var localizedDescriptionLine = "\"NSUserTrackingUsageDescription\" = \"" + localizedUserTrackingDescription + "\";\n";
        // File already exists, update it in case the value changed between builds.
        if (File.Exists(infoPlistStringsFilePath))
        {
            var output = new List<string>();
            var lines = File.ReadAllLines(infoPlistStringsFilePath);
            var keyUpdated = false;
            foreach (var line in lines)
            {
                if (line.Contains("NSUserTrackingUsageDescription"))
                {
                    output.Add(localizedDescriptionLine);
                    keyUpdated = true;
                }
                else
                {
                    output.Add(line);
                }
            }

            if (!keyUpdated)
            {
                output.Add(localizedDescriptionLine);
            }

            File.WriteAllText(infoPlistStringsFilePath, string.Join("\n", output.ToArray()) + "\n");
        }
        // File doesn't exist, create one.s
        else
        {
            File.WriteAllText(infoPlistStringsFilePath, "/* Localized versions of Info.plist keys - Generated by AL MAX plugin */\n" + localizedDescriptionLine);
        }

        var guid = project.AddFolderReference(localeSpecificDirectoryPath, Path.Combine(resourcesDirectoryName, localeSpecificDirectoryName));
        project.AddFileToBuild(targetGuid, guid);
    }
#endregion

#region Info plist modification
    [PostProcessBuildAttribute(int.MaxValue - 2)]
    public static void MaxPostProcessPlist(BuildTarget buildTarget, string path)
    {
        UTUDLocalizationSettings localizationAsset = Resources.Load<UTUDLocalizationSettings>("UTUDLocalizationSettings");
        
        var plistPath = Path.Combine(path, "Info.plist");
        var plist = new PlistDocument();
        plist.ReadFromFile(plistPath);

        EnableConsentFlow(plist, path, localizationAsset);
        UpdateAppTransportSecuritySettingsIfNeeded(plist);
        AddAppTrackingTransparencyFrameWork(buildTarget, path);

        plist.WriteToFile(plistPath);
    }

    private static void EnableConsentFlow(PlistDocument plist, string buildPath, UTUDLocalizationSettings localizationAsset)
    {
        string userTrackingUsageDescription = _defaultDescriptionEn;
        var enLocalization = localizationAsset.Localization.Where((l) => l.Code.ToLower() == "en" ).ToList();
        if (enLocalization.Count != 0)
            userTrackingUsageDescription = enLocalization[0].LocalizedText;

        plist.root.SetString("NSUserTrackingUsageDescription", userTrackingUsageDescription);
    }

    private static void UpdateAppTransportSecuritySettingsIfNeeded(PlistDocument plist)
    {
        var root = plist.root.values;
        PlistElement atsRoot;
        root.TryGetValue("NSAppTransportSecurity", out atsRoot);

        if (atsRoot == null || atsRoot.GetType() != typeof(PlistElementDict))
        {
            // Add the missing App Transport Security settings for publishers if needed. 
            atsRoot = plist.root.CreateDict("NSAppTransportSecurity");
            atsRoot.AsDict().SetBoolean("NSAllowsArbitraryLoads", true);
        }

        var atsRootDict = atsRoot.AsDict().values;
        // Check if both NSAllowsArbitraryLoads and NSAllowsArbitraryLoadsInWebContent are present and remove NSAllowsArbitraryLoadsInWebContent if both are present.
        if (atsRootDict.ContainsKey("NSAllowsArbitraryLoads") && atsRootDict.ContainsKey("NSAllowsArbitraryLoadsInWebContent"))
        {
            atsRootDict.Remove("NSAllowsArbitraryLoadsInWebContent");
        }
    }
    
    private static void AddAppTrackingTransparencyFrameWork(BuildTarget target, string pathToBuiltProject)
    {
        if (target != BuildTarget.iOS)
        {
            return;
        }

        var projPath = pathToBuiltProject + "/Unity-iPhone.xcodeproj/project.pbxproj";
        var proj = new PBXProject();
        proj.ReadFromFile(projPath);

        var targetGUID = @"";
#if (UNITY_2019_3_OR_NEWER)
        targetGUID = proj.GetUnityFrameworkTargetGuid();
#else
            targetGUID = proj.TargetGuidByName("Unity-iPhone");
#endif

        proj.AddBuildProperty(targetGUID, "OTHER_LDFLAGS", "-ObjC");
        proj.AddFrameworkToProject(targetGUID, "AdSupport.framework", false);
        proj.AddFrameworkToProject(targetGUID, "AppTrackingTransparency.framework", true);

        proj.WriteToFile(projPath);
    }

#endregion

}

#endif